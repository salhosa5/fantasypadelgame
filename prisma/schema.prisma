generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  passwordHash   String
  teamName       String
  favoriteClub   String?
  createdAt      DateTime         @default(now())
  League         League[]
  leagues        LeagueMember[]
  LeagueStanding LeagueStanding[]
  transfers      Transfer[]
  usedChips      UsedChip[]
  points         UserPoints[]
  squads         UserSquad[]
}

model Team {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  shortName    String    @db.VarChar(8)
  logoUrl      String?
  awayFixtures Fixture[] @relation("AwayTeam")
  homeFixtures Fixture[] @relation("HomeTeam")
  players      Player[]
}

model Player {
  id        Int          @id @default(autoincrement())
  teamId    Int
  name      String
  position  Position
  price     Decimal      @db.Decimal(6, 1)
  status    PlayerStatus @default(FIT)
  createdAt DateTime     @default(now())
  team      Team         @relation(fields: [teamId], references: [id])
  stats     PlayerStat[]
  picks     UserPick[]
}

model Gameweek {
  id        Int              @id @default(autoincrement())
  name      String
  deadline  DateTime
  fixtures  Fixture[]
  standings LeagueStanding[]
  transfers Transfer[]
  usedChips UsedChip[]
  points    UserPoints[]
  squads    UserSquad[]
}

model Fixture {
  id          Int           @id @default(autoincrement())
  gameweekId  Int
  homeTeamId  Int
  awayTeamId  Int
  kickoff     DateTime
  status      FixtureStatus @default(UPCOMING)
  homeGoals   Int?
  awayGoals   Int?
  scored      Boolean       @default(false)
  awayTeam    Team          @relation("AwayTeam", fields: [awayTeamId], references: [id])
  gameweek    Gameweek      @relation(fields: [gameweekId], references: [id])
  homeTeam    Team          @relation("HomeTeam", fields: [homeTeamId], references: [id])
  playerStats PlayerStat[]
}

model PlayerStat {
  id            Int     @id @default(autoincrement())
  fixtureId     Int
  playerId      Int
  minutes       Int     @default(0)
  goals         Int     @default(0)
  assists       Int     @default(0)
  cleanSheet    Boolean @default(false)
  goalsConceded Int     @default(0)
  penSaved      Int     @default(0)
  penMissed     Int     @default(0)
  yellowCards   Int     @default(0)
  redCards      Int     @default(0)
  ownGoals      Int     @default(0)
  motm          Boolean @default(false)
  fixture       Fixture @relation(fields: [fixtureId], references: [id])
  player        Player  @relation(fields: [playerId], references: [id])

  @@unique([fixtureId, playerId])
  @@index([fixtureId])
  @@index([playerId])
}

model UserSquad {
  id            Int         @id @default(autoincrement())
  userId        String
  gameweekId    Int
  budget        Decimal     @default(100.0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  chip          ChipType    @default(NONE)
  freeTransfers Int         @default(1)
  score         SquadScore?
  picks         UserPick[]
  gameweek      Gameweek    @relation(fields: [gameweekId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, gameweekId])
}

model UserPick {
  id        Int       @id @default(autoincrement())
  squadId   Int
  playerId  Int
  role      String
  isCaptain Boolean   @default(false)
  isVice    Boolean   @default(false)
  player    Player    @relation(fields: [playerId], references: [id])
  squad     UserSquad @relation(fields: [squadId], references: [id])

  @@unique([squadId, playerId])
}

model Transfer {
  id          String   @id @default(cuid())
  userId      String
  gameweekId  Int
  outPlayerId Int
  inPlayerId  Int
  priceDiff   Decimal? @db.Decimal(6, 1)
  createdAt   DateTime @default(now())
  gameweek    Gameweek @relation(fields: [gameweekId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId, gameweekId])
}

model UserPoints {
  id          String   @id @default(cuid())
  userId      String
  gameweekId  Int
  gwPoints    Int      @default(0)
  totalPoints Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gameweek    Gameweek @relation(fields: [gameweekId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameweekId])
  @@index([gameweekId])
}

model League {
  id             String           @id @default(cuid())
  name           String
  code           String           @unique
  adminUserId    String
  adminUser      User             @relation(fields: [adminUserId], references: [id])
  members        LeagueMember[]
  LeagueStanding LeagueStanding[]
}

model LeagueMember {
  id        String   @id @default(cuid())
  leagueId  String
  userId    String
  createdAt DateTime @default(now())
  league    League   @relation(fields: [leagueId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([leagueId, userId])
  @@index([userId])
}

model LeagueStanding {
  id          String   @id @default(cuid())
  leagueId    String
  gameweekId  Int
  userId      String
  gwPoints    Int
  totalPoints Int
  gameweek    Gameweek @relation(fields: [gameweekId], references: [id])
  league      League   @relation(fields: [leagueId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([leagueId, gameweekId, userId])
  @@index([leagueId, gameweekId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SquadScore {
  id        Int       @id @default(autoincrement())
  squadId   Int       @unique
  points    Int       @default(0)
  updatedAt DateTime  @updatedAt
  squad     UserSquad @relation(fields: [squadId], references: [id], onDelete: Cascade)
}

model UsedChip {
  id         String   @id @default(cuid())
  userId     String
  chip       ChipType
  gameweekId Int
  usedAt     DateTime @default(now())
  gameweek   Gameweek @relation(fields: [gameweekId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, chip])
  @@index([userId])
}

enum Position {
  GK
  DEF
  MID
  FWD
}

enum PlayerStatus {
  FIT
  INJURED
  SUSPENDED
}

enum FixtureStatus {
  UPCOMING
  LIVE
  FINISHED
  SCORED
}

enum ChipType {
  NONE
  WILDCARD
  BENCH_BOOST
  TRIPLE_CAPTAIN
  TWO_CAPTAINS
}
